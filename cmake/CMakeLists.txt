cmake_minimum_required (VERSION 3.0.2)

add_compile_options(-std=c++11 -O2)

project(basic)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/basic CACHE PATH "..." FORCE)
endif()

include_directories (${PROJECT_SOURCE_DIR}/../include)

function(setSourceGroup strSourceGroup strDir)
    file(GLOB listFiles "${strDir}/*")
    foreach(it ${listFiles})
        get_filename_component(nameFile ${it} NAME)
        get_filename_component(extFile ${it} EXT)
        if(IS_DIRECTORY ${it})  
            setSourceGroup("${strSourceGroup}\\${nameFile}"
                "${strDir}/${nameFile}")
        elseif("${extFile}" MATCHES "\\.h")
            source_group(${strSourceGroup} FILES ${it})
        endif()
    endforeach()
endfunction(setSourceGroup)

function(upperName strInput strOutput)
    string(LENGTH ${strInput} strLength)
    math(EXPR strLength "${strLength}-1")
    string(SUBSTRING ${strInput} 0 1 firstName)
    string(TOUPPER ${firstName} firstName)
    string(SUBSTRING ${strInput} 1 ${strLength} nextName)
    set(${strOutput} "${firstName}${nextName}" PARENT_SCOPE)
endfunction(upperName)

function(tagExtensionFilename strTagOutput strExtOutput strInput)
    string(LENGTH "${strInput}" lenInput)
    if(NOT ${lenInput} EQUAL 0)
        string(FIND ${strInput} "." pos REVERSE)
        math(EXPR lenExt "${lenInput}-${pos}")
        string(SUBSTRING "${strInput}" 0 ${pos} strTag)
        string(SUBSTRING "${strInput}" ${pos} ${lenExt} strExt)
        set(${strTagOutput} "${strTag}" PARENT_SCOPE)
        set(${strExtOutput} "${strExt}" PARENT_SCOPE)
    else()
        set(${strTagOutput} "" PARENT_SCOPE)
        set(${strExtOutput} "" PARENT_SCOPE)
    endif()
endfunction(tagExtensionFilename)

function(targetName strOutput strTarget strName strTag)
    upperName("${strName}" strUpperName)
    string(LENGTH "${strTag}" lenTag)
    if(${lenTag} GREATER 1)
        math(EXPR lenTag "${lenTag}-1")
        string(SUBSTRING "${strTag}" 1 ${lenTag} strTag)
        set(${strOutput} "${strTarget}${strUpperName}_${strTag}" PARENT_SCOPE)
    else()
        set(${strOutput} "${strTarget}${strUpperName}" PARENT_SCOPE)
    endif()
endfunction(targetName)

function(getHeaderTarget strTargetDir strTargetName strTargetTag listOutput)
    file(GLOB listFiles "${strTargetDir}/*")
    unset(listHeader)
    foreach(it ${listFiles})
        get_filename_component(nameFile ${it} NAME_WE)
        get_filename_component(extFile ${it} EXT)
        if(${nameFile} STREQUAL ${strTargetName})
            TagExtensionFilename(strCmd strExt "${extFile}")
            string(TOLOWER  "${strExt}" strExt)
            if("${strExt}" MATCHES "\\.h")
                TagExtensionFilename(strTag strCmd "${strCmd}")
                if("${strCmd}" MATCHES "\\.test")
                    if(NOT ${strTag} OR ${strTag} STREQUAL ${strTargetTag})
                        source_group("Test Header Files" FILES ${it})
                        list(APPEND listHeader ${it})
                    endif()
                endif()
            endif()
        endif()
    endforeach()
    set(${listOutput} ${listHeader} PARENT_SCOPE)
endfunction(getHeaderTarget)

function(addTestExecutable strTarget strFolder strDir listOther)
    file(GLOB listFiles "${strDir}/*")
    foreach(it ${listFiles})
        get_filename_component(dirFile ${it} DIRECTORY)
        get_filename_component(nameFile ${it} NAME_WE)
        get_filename_component(extFile ${it} EXT)
        if(IS_DIRECTORY ${it})  
            UpperName(${nameFile} upperNameFile)
            addTestExecutable("${strTarget}${upperNameFile}" "${strFolder}//${nameFile}" 
                "${strDir}/${nameFile}" "${listOther}")
        else()
            set(strName "${nameFile}")
            TagExtensionFilename(strCmd strExt "${extFile}")
            string(TOLOWER  "${strExt}" strExt)
            if("${strExt}" MATCHES "\\.cpp")
                TagExtensionFilename(strTag strCmd "${strCmd}")
                if("${strCmd}" MATCHES "\\.main")
                    targetName(strTargetName "${strTarget}" "${strName}" "${strTag}")
                    getHeaderTarget("${dirFile}" "${strName}" "${strTag}" listHeader)
                    add_executable("${strTargetName}" ${it} ${listOther} ${listHeader})
                    set_property(TARGET "${strTargetName}" PROPERTY FOLDER ${strFolder})
                    add_test(NAME "${strTargetName}" COMMAND ${strTargetName})
                endif()
            endif()
        endif()
    endforeach()
endfunction(addTestExecutable)

file(GLOB_RECURSE LIST_INCLUDE "${PROJECT_SOURCE_DIR}/../include/*")

setSourceGroup("Header Files" "${PROJECT_SOURCE_DIR}/../include")

enable_testing()

addTestExecutable("Test" "test" "${PROJECT_SOURCE_DIR}/../test" "${LIST_INCLUDE}")

install (DIRECTORY ${PROJECT_SOURCE_DIR}/../include/ DESTINATION basic/include/basic)

set(INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/basic)
