#include "test/msg/fmt/param/flag/Integer.h"
#include "test/out/CString.h"

#include <cassert>
#include <utility>
#include <cstring>

template<int Val>
struct IFormat
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return 0;   
    }
};

///////
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% llX");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hi");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*i");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*li");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::signed_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lli");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*u");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::decimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llu");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*ho");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*o");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lo");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::octal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llo");
   }
};
 
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*x");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lx");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::lower | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llx");
   }
};
  
template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_signed | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_char | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hhX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_short | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*hX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_int | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*X");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*lX");
   }
};

template<>
struct IFormat<test::msg::fmt::param::flag::Integer::define_unsigned | 
    test::msg::fmt::param::flag::Integer::define_long_long | 
    test::msg::fmt::param::flag::Integer::unsigned_integer | 
    test::msg::fmt::param::flag::Integer::hexadecimal | 
    test::msg::fmt::param::flag::Integer::upper | 
    test::msg::fmt::param::flag::Integer::width | 
    test::msg::fmt::param::flag::Integer::length | 
    test::msg::fmt::param::flag::Integer::prefix | 
    test::msg::fmt::param::flag::Integer::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*llX");
   }
};


int main()
{
    using namespace test::msg::fmt::param::flag;
    {
        //default
        {
            constexpr Integer i1{
                };
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Decimal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Octal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix
        //default
        {
            constexpr Integer i1{arg::Prefix{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } //default
        {
            constexpr Integer i1{arg::Prefix{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        
        //prefix-plus
        //default
        {
            constexpr Integer i1{arg::PrefixPlus{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-space
        //default
        {
            constexpr Integer i1{arg::PrefixSpace{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-zero
        //default
        {
            constexpr Integer i1{arg::PrefixZero{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //width
        //default
        {
            constexpr Integer i1{
                arg::Width{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix
        //default
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } //default
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        
        //prefix-plus
        //default
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-space
        //default
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-zero
        //default
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //length
        //default
        {
            constexpr Integer i1{
                arg::Length{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix
        //default
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } //default
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        
        //prefix-plus
        //default
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-space
        //default
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% .*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-zero
        //default
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //width-length
        //default
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix
        //default
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } //default
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::Prefix{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%#*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        
        //prefix-plus
        //default
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixPlus{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::plus | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%+*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-space
        //default
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixSpace{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::space | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "% *.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }

        //prefix-zero
        //default
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //define
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //signed-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hi";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*i";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*li";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Signed{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lli";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned decimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned-decimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*u";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Decimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::decimal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llu";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        } 
        //octal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned octal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*ho";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*o";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Octal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::octal | Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llo";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-lower
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*x";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::lower));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llx";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        //unsigned hexadecimal-upper
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_signed | Integer::define_long_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned char>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_char |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hhX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned short>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_short |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*hX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned int>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_int |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*X";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*lX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long_long | 
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            test::out::CString<char> out_cstr1;
            IFormat<i1.GetValue()>::Output(out_cstr1);
            char format1[] = "%0*.*llX";
            assert(strncmp(*(out_cstr1.Get()), format1, sizeof(format1)) == 0);
        }
        {
            constexpr Integer i1{arg::PrefixZero{}, 
                arg::Width{}, arg::Length{}, 
                arg::Unsigned{}, arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<unsigned long>{}};
        
            assert(i1.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            constexpr Integer i2{i1};

            assert(i2.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));
            
            constexpr Integer i3{std::move(i2)};

            assert(i3.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));
            assert(i2.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            Integer i4;
            
            assert(i4.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));

            i4 = i1;
            
            assert(i4.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

            Integer i5;
            
            assert(i5.GetValue() == (
                Integer::define_signed | Integer::define_int | 
                Integer::signed_integer | Integer::decimal | Integer::lower));
                
            i5 = std::move(i4);
            
            assert(i5.GetValue() == (Integer::prefix | Integer::zero | 
                Integer::width | Integer::length | 
                Integer::define_unsigned | Integer::define_long |
                Integer::unsigned_integer | Integer::hexadecimal | 
                Integer::upper));

        }
    }
    return 1;
}