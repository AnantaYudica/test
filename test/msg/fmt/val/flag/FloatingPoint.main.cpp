#include "test/msg/fmt/param/flag/FloatingPoint.h"
#include "test/out/CString.h"

#include <cassert>
#include <utility>

template<int Val>
struct FfFormat
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return 0;
    }
};

///////

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%LA");
    }
};

//prefix: #

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#LA");
    }
};

//prefix: +

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+LA");
    }
};

//prefix:  

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% LA");
    }
};

//prefix: 0

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0LA");
    }
};

//////////

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*LA");
    }
};

//prefix: #

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*LA");
    }
};

//prefix: +

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*LA");
    }
};

//prefix:  

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *LA");
    }
};

//prefix: 0

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*LA");
    }
};
//////////////

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%.*LA");
    }
};

//prefix: #

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#.*LA");
    }
};

//prefix: +

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+.*LA");
    }
};

//prefix:  

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% .*LA");
    }
};

//prefix: 0

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0.*LA");
    }
};
///////


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%*.*LA");
    }
};

//prefix: #

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper |
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%#*.*LA");
    }
};

//prefix: +

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::plus|
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%+*.*LA");
    }
};

//prefix:  

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::space |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "% *.*LA");
    }
};

//prefix: 0

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*f");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*Lf");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*F");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*LF");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*e");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*Le");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*E");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*LE");
    }
};


template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*g");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*Lg");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*G");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::decimal |
    test::msg::fmt::param::flag::FloatingPoint::fixed |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*LG");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*a");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::lower | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*La");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent |
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*A");
    }
};

template<>
struct FfFormat<test::msg::fmt::param::flag::FloatingPoint::define_long |
    test::msg::fmt::param::flag::FloatingPoint::define_double |
    test::msg::fmt::param::flag::FloatingPoint::hexadecimal |
    test::msg::fmt::param::flag::FloatingPoint::exponent|
    test::msg::fmt::param::flag::FloatingPoint::upper | 
    test::msg::fmt::param::flag::FloatingPoint::prefix |
    test::msg::fmt::param::flag::FloatingPoint::zero |
    test::msg::fmt::param::flag::FloatingPoint::width |
    test::msg::fmt::param::flag::FloatingPoint::precision>
{
    static auto Output(test::out::Interface<char>& out) -> 
        decltype(out.Print("_"))
    {
        return out.Print("%s", "%0*.*LA");
    }
};


int main()
{
    using namespace test::msg::fmt::param::flag;
    {
        {
            constexpr FloatingPoint ff1{};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{},
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{},
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LF", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{},
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{},
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LG", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Decimal{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LF", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Exponent{},
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LA", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Fixed{},
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%A", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Hexadecimal{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LA", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LF", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LG", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%LF", 4) == 0);     
        }
    }
    //////////////////////////
    
    {
        {
            constexpr FloatingPoint ff1{arg::Prefix{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LF", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LG", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LF", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LA", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#A", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LA", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LF", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LG", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Prefix{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#LF", 4) == 0);     
        }

    }

    ///////////////////////

    
    {
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LF", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LG", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LF", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LA", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+A", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LA", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LF", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LG", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixPlus{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+LF", 4) == 0);     
        }

    }
    ////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LF", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LG", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LF", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LA", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% A", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LA", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LF", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LG", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixSpace{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% LF", 4) == 0);     
        }

    }
    /////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LF", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LG", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LF", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0La", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0A", 4) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LA", 4) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0a", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0La", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0A", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0A", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LA", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LF", 4) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Le", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0e", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Le", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0E", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0E", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LE", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0g", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lg", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0G", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0G", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LG", 4) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0f", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0Lf", 4) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0F", 3) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::PrefixZero{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0LF", 4) == 0);     
        }

    }

    /////////////

    //WIDTH
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LF", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LG", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LF", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LA", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*A", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LA", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LF", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LG", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*LF", 5) == 0);     
        }
    }
    //////////////////////////
    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LF", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LG", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LF", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LA", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*A", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LA", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LF", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LG", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Prefix{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*LF", 5) == 0);     
        }

    }

    ///////////////////////

    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{},
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LF", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LG", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LF", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LA", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*A", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LA", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LF", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LG", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*LF", 5) == 0);     
        }

    }
    ////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LF", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LG", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LF", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LA", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *A", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LA", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LF", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LG", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *LF", 5) == 0);     
        }

    }
    /////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LF", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LG", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LF", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*La", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*A", 5) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LA", 5) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*a", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*La", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*A", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*A", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LA", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LF", 5) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Le", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*e", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Le", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*E", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*E", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LE", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{},
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*g", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lg", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*G", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*G", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LG", 5) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*f", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*Lf", 5) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*F", 4) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*LF", 5) == 0);     
        }

    }

    //WIDTH

    //PRECISION
    {
        {
            constexpr FloatingPoint ff1{arg::Precision{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LF", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LG", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LF", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LA", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*A", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LA", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LF", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LG", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%.*LF", 6) == 0);     
        }
    }
    //////////////////////////
    
    {
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LF", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LG", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LF", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LA", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*A", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LA", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LF", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LG", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::Prefix{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#.*LF", 6) == 0);     
        }

    }

    ///////////////////////

    
    {
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{},
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LF", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LG", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LF", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LA", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*A", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LA", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LF", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LG", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+.*LF", 6) == 0);     
        }

    }
    ////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LF", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LG", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LF", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LA", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*A", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LA", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LF", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LG", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% .*LF", 6) == 0);     
        }

    }
    /////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LF", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LG", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LF", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*La", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*A", 6) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LA", 6) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*a", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*La", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*A", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*A", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LA", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LF", 6) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Le", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*e", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Le", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*E", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*E", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LE", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{},
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*g", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lg", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*G", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*G", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LG", 6) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*f", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*Lf", 6) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*F", 5) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Precision{}, arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0.*LF", 6) == 0);     
        }

    }
  
    //PRECISION

    //WIDTH - PRECISION
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LF", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LG", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LF", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*A", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LA", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*A", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Hexadecimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LA", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LF", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LG", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%*.*LF", 7) == 0);     
        }
    }
    //////////////////////////
    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LF", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LG", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LF", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*A", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LA", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*A", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LA", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LF", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LG", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::Prefix{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%#*.*LF", 7) == 0);     
        }

    }

    ///////////////////////

    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{},
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LF", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LG", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Decimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LF", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*A", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LA", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*A", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LA", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LF", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LG", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixPlus{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::plus | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%+*.*LF", 7) == 0);     
        }

    }
    ////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LF", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LG", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LF", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*A", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LA", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*A", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LA", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LF", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LG", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixSpace{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::space | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "% *.*LF", 7) == 0);     
        }

    }
    /////////////
    
    
    {
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LF", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Fixed{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LG", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Decimal{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LF", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }

        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*La", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*A", 7) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*A", 7) == 0);    
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Exponent{}, arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LA", 7) == 0);    
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::fixed |
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Fixed{}, arg::Exponent{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;
            
            auto res = FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(res == 0);      
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*a", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*La", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*A", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::hexadecimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*A", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Hexadecimal{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::hexadecimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LA", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LF", 7) == 0);     
        }


        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Le", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*e", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower |
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Le", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*E", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::exponent |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*E", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Exponent{}, 
                arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LE", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{},
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*g", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Lower{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lg", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::fixed | FloatingPoint::decimal | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*G", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::exponent | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*G", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Fixed{}, 
                arg::Exponent{}, arg::Upper{}, arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::exponent | 
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LG", 7) == 0);     
        }

        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Lower{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);   
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::lower | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*f", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Lower{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::lower | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*Lf", 7) == 0);     
        }
        
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Upper{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);   
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<float>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed |
                FloatingPoint::upper | FloatingPoint::prefix | 
                FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*F", 6) == 0);     
        }
        {
            constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

            assert(ff1.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::define_long | FloatingPoint::decimal | 
                FloatingPoint::fixed | FloatingPoint::upper | 
                FloatingPoint::prefix | FloatingPoint::zero | 
                FloatingPoint::width | FloatingPoint::precision));
            
            test::out::CString<char> out_cstr1;

            FfFormat<ff1.GetValue()>::Output(out_cstr1);
            assert(strncmp(*(out_cstr1.Get()), "%0*.*LF", 7) == 0);     
        }

    }

    //WIDTH - PRECISION

    {
        constexpr FloatingPoint ff1{arg::Width{}, arg::Precision{},
                 arg::PrefixZero{}, 
                arg::Upper{}, 
                arg::Define<long double>{}};

        assert(ff1.GetValue() == (FloatingPoint::define_double |
            FloatingPoint::define_long | FloatingPoint::decimal | 
            FloatingPoint::fixed | FloatingPoint::upper | 
            FloatingPoint::prefix | FloatingPoint::zero | 
            FloatingPoint::width | FloatingPoint::precision));

        constexpr FloatingPoint ff2{ff1};

        assert(ff2.GetValue() == (FloatingPoint::define_double |
            FloatingPoint::define_long | FloatingPoint::decimal | 
            FloatingPoint::fixed | FloatingPoint::upper | 
            FloatingPoint::prefix | FloatingPoint::zero | 
            FloatingPoint::width | FloatingPoint::precision));

        constexpr FloatingPoint ff3{std::move(ff2)};

        assert(ff3.GetValue() == (FloatingPoint::define_double |
            FloatingPoint::define_long | FloatingPoint::decimal | 
            FloatingPoint::fixed | FloatingPoint::upper | 
            FloatingPoint::prefix | FloatingPoint::zero | 
            FloatingPoint::width | FloatingPoint::precision));
        
        assert(ff2.GetValue() == (FloatingPoint::define_double |
            FloatingPoint::define_long | FloatingPoint::decimal | 
            FloatingPoint::fixed | FloatingPoint::upper | 
            FloatingPoint::prefix | FloatingPoint::zero | 
            FloatingPoint::width | FloatingPoint::precision));

        FloatingPoint ff4;

        assert(ff4.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower));

        ff4 = ff3;
        
        assert(ff4.GetValue() == (FloatingPoint::define_double |
            FloatingPoint::define_long | FloatingPoint::decimal | 
            FloatingPoint::fixed | FloatingPoint::upper | 
            FloatingPoint::prefix | FloatingPoint::zero | 
            FloatingPoint::width | FloatingPoint::precision));
            
        FloatingPoint ff5;

        assert(ff5.GetValue() == (FloatingPoint::define_double |
                FloatingPoint::decimal | FloatingPoint::fixed | 
                FloatingPoint::lower));
                
        ff5 = ff4;
        
        assert(ff5.GetValue() == (FloatingPoint::define_double |
            FloatingPoint::define_long | FloatingPoint::decimal | 
            FloatingPoint::fixed | FloatingPoint::upper | 
            FloatingPoint::prefix | FloatingPoint::zero | 
            FloatingPoint::width | FloatingPoint::precision));
    }

    return 1;
}